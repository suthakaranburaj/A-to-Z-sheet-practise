/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:

    ListNode* findmiddle(ListNode*head){
        ListNode*slow=head;
        ListNode*fast=head;

        while(fast->next)
        {
            fast=fast->next;
            if(fast->next)
            {
                slow=slow->next;
                fast=fast->next;
            }

        }
        return slow;
    }
    ListNode* merge(ListNode* left, ListNode* right) {
        if(left==0)return right;
        if(right==0)return left;
        
        ListNode*ans=new ListNode(-1);
        ListNode*mptr=ans;
        while(left && right){
            if(left->val <= right->val)
            {
                mptr->next=left;
                mptr=left;
                left=left->next;
            }
            else{
                mptr->next=right;
                mptr=right;
                right=right->next;
            }
           
            
        }
         if(left)
            {
                mptr->next=left;
                
            }
        if(right)
            {
                mptr->next=right;
                
            }
            return ans->next;
    }

    ListNode* sortList(ListNode* head) {
        if(head==0 || head->next==0){
            return head;
        }
        ListNode*mid=findmiddle(head);
        ListNode*right=mid->next;
        ListNode*left=head;
        mid->next=0;

        left =sortList(left);
        right=sortList(right);

        ListNode*mergedLL=merge(left,right);
        return mergedLL;
    }
};